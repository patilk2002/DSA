class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        Stack<Integer> stack=new Stack<Integer>();
        
        // int n=pushed.length;
        // if(popped.length!=n) return false;
        // int a=0,b=0;
        // for(int i=0;i<2*n;i++){
        //     if(a>=n || b>=n) break;

        //     if(pushed[a]!=popped[b]){
        //         // System.out.println(pushed[a]);
        //         stack.push(pushed[a]);
        //         a++;
        //     }
            
        //     else {
        //         // stack.push(pushed[a]);
        //         System.out.print(stack.pop());
        //         a--;
        //         b++;

        //     }
        // }

        // if(stack.isEmpty()) return true;

        // return false;


        // int i=0;
        // for(int k:pushed){
        //     stack.push(k);
        //     while(!stack.isEmpty() && stack.peek()==popped[i]){
        //         stack.pop();
        //         i++;
        //     }
        // }
        
        // if(stack.isEmpty()) return true;
        // else return false;
        

        int i=-1;
        int j=0;

        for(int k:pushed){
            i++;
            while(i!=-1 && pushed[i]==popped[j]){
                i--;
                j++;
            }
        }
        return i==-1;
    }
}


